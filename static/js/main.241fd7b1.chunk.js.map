{"version":3,"sources":["TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","state","newItem","list","key","value","this","setState","id","Math","random","push","updatedList","filter","item","className","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","style","color","maxWidth","fontSize","deleteItem","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAEqBA,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,GACTC,KAAM,IAJA,E,yEAQFC,EAAKC,GACbC,KAAKC,SAAL,eAAgBH,EAAMC,M,gCAGtB,IAAMH,EAAU,CACZM,GAAI,EAAIC,KAAKC,SACbL,MAAOC,KAAKL,MAAMC,SAEhBC,EAAI,YAAOG,KAAKL,MAAME,MACP,KAAlBD,EAAQG,OACPF,EAAKQ,KAAKT,GAGdI,KAAKC,SAAS,CACVJ,KAAMA,EACND,QAAS,O,iCAGNM,GACP,IACMI,EADI,YAAON,KAAKL,MAAME,MACHU,QAAO,SAAAC,GAAI,OAAIA,EAAKN,KAAOA,KACpDF,KAAKC,SAAS,CAACJ,KAAMS,M,+BAEf,IAAD,OACL,OACI,yBAAKG,UAAU,kBACX,wBAAIA,UAAU,SAAd,cACA,yBAAKA,UAAU,mBACX,2BACIC,KAAK,OACLC,YAAY,2BACZZ,MAAOC,KAAKL,MAAMC,QAClBgB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAY,UAAWD,EAAEE,OAAOhB,QACpDU,UAAU,UAEd,4BAAQO,QAAS,kBAAM,EAAKC,YAA5B,QAEJ,4BACKjB,KAAKL,MAAME,KAAKqB,KAAI,SAAAV,GACjB,OACI,wBAAIV,IAAKU,EAAKN,IACV,yBAAKiB,MAAO,CAACC,MAAO,OAAQC,SAAU,MAAOC,SAAU,WAAYd,EAAKT,OAExE,4BAAQiB,QAAS,kBAAM,EAAKO,WAAWf,EAAKN,MAA5C,e,GApDMsB,a,MCUvBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.241fd7b1.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class TodoList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            newItem: '',\r\n            list: []\r\n        }\r\n\r\n    }\r\n    updateInput(key, value) {\r\n        this.setState({[key]: value});\r\n    }\r\n    addItem() {\r\n        const newItem = {\r\n            id: 1 + Math.random(),\r\n            value: this.state.newItem\r\n        }\r\n        const list = [...this.state.list];\r\n        if(newItem.value !== ''){\r\n            list.push(newItem);\r\n        }\r\n        \r\n        this.setState({\r\n            list: list,\r\n            newItem: ''\r\n        })\r\n    }\r\n    deleteItem(id){\r\n        const list = [...this.state.list];\r\n        const updatedList = list.filter(item => item.id !== id);\r\n        this.setState({list: updatedList})\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"todo-container\">\r\n                <h1 className=\"title\">TO DO List</h1>\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your TO DO here...\"\r\n                        value={this.state.newItem}\r\n                        onChange={e => this.updateInput('newItem', e.target.value)}\r\n                        className=\"input\"\r\n                    />\r\n                    <button onClick={() => this.addItem()}>Add</button>\r\n                </div>\r\n                <ul>\r\n                    {this.state.list.map(item => {\r\n                        return (\r\n                            <li key={item.id}>\r\n                                <div style={{color: '#fff', maxWidth: '90%', fontSize: '1.2rem'}}>{item.value}</div>\r\n                               \r\n                                <button onClick={() => this.deleteItem(item.id)}>X</button>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n} ","import React from 'react';\nimport TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}